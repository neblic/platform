receivers:
  otlp/receiver:
    protocols:
      grpc:
        # Required: Data plane endpoint.
        endpoint: "${env:NEBLIC_DATA_PLANE_RECEIVER_ENDPOINT}"

        # Uncomment to enable TLS
        # tls:
        #   cert_file: /etc/otelcol/ca/otelcol.crt
        #   key_file: /etc/otelcol/ca/otelcol.key

        # To use Bearer authentication TLS needs to be enabled
        # auth:
        #   authenticator: bearerauth

processors:
  batch:
    send_batch_size: "${env:PROCESSOR_BATCH_SEND_BATCH_SIZE}"
    timeout: "${env:PROCESSOR_BATCH_TIMEOUT}"
    send_batch_max_size: "${env:PROCESSOR_BATCH_SEND_BATCH_MAX_SIZE}"
    metadata_keys: "${env:PROCESSOR_BATCH_METADATA_KEYS}"
    metadata_cardinality_limit: "${env:PROCESSOR_BATCH_METADATA_CARDINALITY_LIMIT}"

  transform/propagate_loki_labels:
    error_mode: ignore
    log_statements:
    - context: log
      statements:
        - set(attributes["sampler"], instrumentation_scope.name)
        - set(attributes["resource"], resource.attributes["service.name"])
        - set(attributes["loki.attribute.labels"], ["sampler", "resource", "com.neblic.sample.type", "com.neblic.sample.stream.uids", "com.neblic.sample.encoding"])
        - set(attributes["loki.format"], "raw")

  transform/propagate_prometheus_labels:
    error_mode: ignore
    metric_statements:
    - context: datapoint
      statements:
        - set(attributes["sampler"], instrumentation_scope.name)
        - set(attributes["resource"], resource.attributes["service.name"])

  # Uncomment to enable the Neblic Cloud exporter
  # filter/remove_raw_samples:
  #   error_mode: ignore
  #   logs:
  #     log_record:
  #       - attributes["com.neblic.sample.type"] == "raw"

connectors:
  neblic:
    # Collector id, if not provided, a random uid is used
    # uid: <unique collector id>

    # Required: Control Plane endpoint
    endpoint: "${env:NEBLIC_CONTROL_PLANE_ENDPOINT}"

    # Where will be configurations persisted on disk. If unset, configurations will be only kept in memory and lost when the collector restarts
    storage_path: "${env:NEBLIC_STORAGE_PATH}"

    # Uncomment to enable TLS
    # tls:
    #   cert_file: /etc/otelcol/ca/otelcol.crt
    #   key_file: /etc/otelcol/ca/otelcol.key

    # To use Bearer authentication TLS needs to be enabled
    # auth:
    #  type: bearer
    #  bearer:
    #     token: some_secret_token

exporters:
  # Uncomment to enable simple summary messages with the amount of `Data Samples` exported
  # logging:

  loki:
    endpoint: "${env:NEBLIC_DATA_PLANE_EXPORTER_LOKI_ENDPOINT}"
    default_labels_enabled:
      exporter: false
      job: false
      instance: false
      level: false
  prometheus:
    endpoint: "${env:NEBLIC_DATA_PLANE_EXPORTER_PROMETHEUS_ENDPOINT}"
    send_timestamps: false
    metric_expiration: 5m
    enable_open_metrics: false
    add_metric_suffixes: false
    resource_to_telemetry_conversion:
      enabled: false

extensions:
  health_check:
    endpoint: 0.0.0.0:5000
  bearertokenauth:
    scheme: Bearer
    token: "${env:NEBLIC_DATA_PLANE_EXPORTER_BEARER_TOKEN}"

service:
  # Collector configuration
  telemetry:
    logs:
      level: info
      encoding: json

  pipelines:
    logs/input:
      receivers:
      - otlp/receiver
      processors:
      - batch
      exporters:
      - neblic
    # Uncomment to start sending data to the Neblic Cloud
    # logs/output_cloud:
    #   receivers:
    #   - neblic
    #   processors:
    #   - filter/remove_raw_samples
    #   exporters:
    #   - otlp/cloud
    logs/output_loki:
      receivers:
      - neblic
      processors:
      - transform/propagate_loki_labels
      exporters:
      - loki
    metrics/output_prometheus:
      receivers:
      - neblic
      processors:
      - transform/propagate_prometheus_labels
      exporters:
      - prometheus
  extensions:
    - health_check
    - bearertokenauth
