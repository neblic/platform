// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.21.6
// source: internal/protos/controlplane.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlPlaneClient is the client API for ControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneClient interface {
	SamplerConn(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_SamplerConnClient, error)
	ClientConn(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_ClientConnClient, error)
}

type controlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneClient(cc grpc.ClientConnInterface) ControlPlaneClient {
	return &controlPlaneClient{cc}
}

func (c *controlPlaneClient) SamplerConn(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_SamplerConnClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[0], "/ControlPlane/SamplerConn", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlPlaneSamplerConnClient{stream}
	return x, nil
}

type ControlPlane_SamplerConnClient interface {
	Send(*SamplerToServer) error
	Recv() (*ServerToSampler, error)
	grpc.ClientStream
}

type controlPlaneSamplerConnClient struct {
	grpc.ClientStream
}

func (x *controlPlaneSamplerConnClient) Send(m *SamplerToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlPlaneSamplerConnClient) Recv() (*ServerToSampler, error) {
	m := new(ServerToSampler)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlPlaneClient) ClientConn(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_ClientConnClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[1], "/ControlPlane/ClientConn", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlPlaneClientConnClient{stream}
	return x, nil
}

type ControlPlane_ClientConnClient interface {
	Send(*ClientToServer) error
	Recv() (*ServerToClient, error)
	grpc.ClientStream
}

type controlPlaneClientConnClient struct {
	grpc.ClientStream
}

func (x *controlPlaneClientConnClient) Send(m *ClientToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlPlaneClientConnClient) Recv() (*ServerToClient, error) {
	m := new(ServerToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlPlaneServer is the server API for ControlPlane service.
// All implementations must embed UnimplementedControlPlaneServer
// for forward compatibility
type ControlPlaneServer interface {
	SamplerConn(ControlPlane_SamplerConnServer) error
	ClientConn(ControlPlane_ClientConnServer) error
	mustEmbedUnimplementedControlPlaneServer()
}

// UnimplementedControlPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServer struct {
}

func (UnimplementedControlPlaneServer) SamplerConn(ControlPlane_SamplerConnServer) error {
	return status.Errorf(codes.Unimplemented, "method SamplerConn not implemented")
}
func (UnimplementedControlPlaneServer) ClientConn(ControlPlane_ClientConnServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientConn not implemented")
}
func (UnimplementedControlPlaneServer) mustEmbedUnimplementedControlPlaneServer() {}

// UnsafeControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServer will
// result in compilation errors.
type UnsafeControlPlaneServer interface {
	mustEmbedUnimplementedControlPlaneServer()
}

func RegisterControlPlaneServer(s grpc.ServiceRegistrar, srv ControlPlaneServer) {
	s.RegisterService(&ControlPlane_ServiceDesc, srv)
}

func _ControlPlane_SamplerConn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlPlaneServer).SamplerConn(&controlPlaneSamplerConnServer{stream})
}

type ControlPlane_SamplerConnServer interface {
	Send(*ServerToSampler) error
	Recv() (*SamplerToServer, error)
	grpc.ServerStream
}

type controlPlaneSamplerConnServer struct {
	grpc.ServerStream
}

func (x *controlPlaneSamplerConnServer) Send(m *ServerToSampler) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlPlaneSamplerConnServer) Recv() (*SamplerToServer, error) {
	m := new(SamplerToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControlPlane_ClientConn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlPlaneServer).ClientConn(&controlPlaneClientConnServer{stream})
}

type ControlPlane_ClientConnServer interface {
	Send(*ServerToClient) error
	Recv() (*ClientToServer, error)
	grpc.ServerStream
}

type controlPlaneClientConnServer struct {
	grpc.ServerStream
}

func (x *controlPlaneClientConnServer) Send(m *ServerToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlPlaneClientConnServer) Recv() (*ClientToServer, error) {
	m := new(ClientToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlPlane_ServiceDesc is the grpc.ServiceDesc for ControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ControlPlane",
	HandlerType: (*ControlPlaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SamplerConn",
			Handler:       _ControlPlane_SamplerConn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientConn",
			Handler:       _ControlPlane_ClientConn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/protos/controlplane.proto",
}
