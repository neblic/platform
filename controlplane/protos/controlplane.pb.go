// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: internal/protos/controlplane.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status_Type int32

const (
	Status_UNKNOWN     Status_Type = 0
	Status_OK          Status_Type = 1
	Status_BAD_REQUEST Status_Type = 2
)

// Enum value maps for Status_Type.
var (
	Status_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "BAD_REQUEST",
	}
	Status_Type_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"BAD_REQUEST": 2,
	}
)

func (x Status_Type) Enum() *Status_Type {
	p := new(Status_Type)
	*p = x
	return p
}

func (x Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_protos_controlplane_proto_enumTypes[0].Descriptor()
}

func (Status_Type) Type() protoreflect.EnumType {
	return &file_internal_protos_controlplane_proto_enumTypes[0]
}

func (x Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_Type.Descriptor instead.
func (Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{0, 0}
}

type SamplingRule_Language int32

const (
	SamplingRule_UNKNOWN SamplingRule_Language = 0
	SamplingRule_CEL     SamplingRule_Language = 1
)

// Enum value maps for SamplingRule_Language.
var (
	SamplingRule_Language_name = map[int32]string{
		0: "UNKNOWN",
		1: "CEL",
	}
	SamplingRule_Language_value = map[string]int32{
		"UNKNOWN": 0,
		"CEL":     1,
	}
)

func (x SamplingRule_Language) Enum() *SamplingRule_Language {
	p := new(SamplingRule_Language)
	*p = x
	return p
}

func (x SamplingRule_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplingRule_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_protos_controlplane_proto_enumTypes[1].Descriptor()
}

func (SamplingRule_Language) Type() protoreflect.EnumType {
	return &file_internal_protos_controlplane_proto_enumTypes[1]
}

func (x SamplingRule_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplingRule_Language.Descriptor instead.
func (SamplingRule_Language) EnumDescriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{1, 0}
}

type Schema_Type int32

const (
	Schema_SCHEMALESS Schema_Type = 0
	Schema_NATIVE     Schema_Type = 1
	Schema_PROTOBUF   Schema_Type = 2
)

// Enum value maps for Schema_Type.
var (
	Schema_Type_name = map[int32]string{
		0: "SCHEMALESS",
		1: "NATIVE",
		2: "PROTOBUF",
	}
	Schema_Type_value = map[string]int32{
		"SCHEMALESS": 0,
		"NATIVE":     1,
		"PROTOBUF":   2,
	}
)

func (x Schema_Type) Enum() *Schema_Type {
	p := new(Schema_Type)
	*p = x
	return p
}

func (x Schema_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_protos_controlplane_proto_enumTypes[2].Descriptor()
}

func (Schema_Type) Type() protoreflect.EnumType {
	return &file_internal_protos_controlplane_proto_enumTypes[2]
}

func (x Schema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Type.Descriptor instead.
func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{5, 0}
}

type ClientSamplingRuleUpdate_Op int32

const (
	ClientSamplingRuleUpdate_UNKNOWN ClientSamplingRuleUpdate_Op = 0
	ClientSamplingRuleUpdate_UPSERT  ClientSamplingRuleUpdate_Op = 1
	ClientSamplingRuleUpdate_DELETE  ClientSamplingRuleUpdate_Op = 2
)

// Enum value maps for ClientSamplingRuleUpdate_Op.
var (
	ClientSamplingRuleUpdate_Op_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPSERT",
		2: "DELETE",
	}
	ClientSamplingRuleUpdate_Op_value = map[string]int32{
		"UNKNOWN": 0,
		"UPSERT":  1,
		"DELETE":  2,
	}
)

func (x ClientSamplingRuleUpdate_Op) Enum() *ClientSamplingRuleUpdate_Op {
	p := new(ClientSamplingRuleUpdate_Op)
	*p = x
	return p
}

func (x ClientSamplingRuleUpdate_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientSamplingRuleUpdate_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_protos_controlplane_proto_enumTypes[3].Descriptor()
}

func (ClientSamplingRuleUpdate_Op) Type() protoreflect.EnumType {
	return &file_internal_protos_controlplane_proto_enumTypes[3]
}

func (x ClientSamplingRuleUpdate_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientSamplingRuleUpdate_Op.Descriptor instead.
func (ClientSamplingRuleUpdate_Op) EnumDescriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{22, 0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Status_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Status_Type" json:"type,omitempty"`
	ErrorMessage string      `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetType() Status_Type {
	if x != nil {
		return x.Type
	}
	return Status_UNKNOWN
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type SamplingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string                `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Language SamplingRule_Language `protobuf:"varint,2,opt,name=language,proto3,enum=SamplingRule_Language" json:"language,omitempty"`
	Rule     string                `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *SamplingRule) Reset() {
	*x = SamplingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingRule) ProtoMessage() {}

func (x *SamplingRule) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingRule.ProtoReflect.Descriptor instead.
func (*SamplingRule) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{1}
}

func (x *SamplingRule) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *SamplingRule) GetLanguage() SamplingRule_Language {
	if x != nil {
		return x.Language
	}
	return SamplingRule_UNKNOWN
}

func (x *SamplingRule) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

type SamplingRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// limit determines the maximum number of exported samples per second.
	// -1 means no exported samples limit
	// 0 means no samples will be exporter
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// burst sets the allowed sample burst
	Burst int64 `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (x *SamplingRate) Reset() {
	*x = SamplingRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplingRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplingRate) ProtoMessage() {}

func (x *SamplingRate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplingRate.ProtoReflect.Descriptor instead.
func (*SamplingRate) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{2}
}

func (x *SamplingRate) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SamplingRate) GetBurst() int64 {
	if x != nil {
		return x.Burst
	}
	return 0
}

// Only the fields that are present are updated. If a field is present,
// the previous value is replaced by the new one.
type SamplerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingRules []*SamplingRule `protobuf:"bytes,1,rep,name=sampling_rules,json=samplingRules,proto3" json:"sampling_rules,omitempty"`
	SamplingRate  *SamplingRate   `protobuf:"bytes,2,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
}

func (x *SamplerConfig) Reset() {
	*x = SamplerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerConfig) ProtoMessage() {}

func (x *SamplerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerConfig.ProtoReflect.Descriptor instead.
func (*SamplerConfig) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{3}
}

func (x *SamplerConfig) GetSamplingRules() []*SamplingRule {
	if x != nil {
		return x.SamplingRules
	}
	return nil
}

func (x *SamplerConfig) GetSamplingRate() *SamplingRate {
	if x != nil {
		return x.SamplingRate
	}
	return nil
}

type SamplerSamplingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplesEvaluated uint64 `protobuf:"varint,1,opt,name=samples_evaluated,json=samplesEvaluated,proto3" json:"samples_evaluated,omitempty"`
	SamplesExported  uint64 `protobuf:"varint,2,opt,name=samples_exported,json=samplesExported,proto3" json:"samples_exported,omitempty"`
}

func (x *SamplerSamplingStats) Reset() {
	*x = SamplerSamplingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerSamplingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerSamplingStats) ProtoMessage() {}

func (x *SamplerSamplingStats) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerSamplingStats.ProtoReflect.Descriptor instead.
func (*SamplerSamplingStats) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{4}
}

func (x *SamplerSamplingStats) GetSamplesEvaluated() uint64 {
	if x != nil {
		return x.SamplesEvaluated
	}
	return 0
}

func (x *SamplerSamplingStats) GetSamplesExported() uint64 {
	if x != nil {
		return x.SamplesExported
	}
	return 0
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Schema_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Schema_Type" json:"type,omitempty"`
	Schema *anypb.Any  `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{5}
}

func (x *Schema) GetType() Schema_Type {
	if x != nil {
		return x.Type
	}
	return Schema_SCHEMALESS
}

func (x *Schema) GetSchema() *anypb.Any {
	if x != nil {
		return x.Schema
	}
	return nil
}

type Sampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-friendly and user-defined name to identify a Sampler.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Defines the Sampler resource where it has been defined.
	// Multiple samplers can have the same name and resource but will hav edifferent uids.
	// e.g. multiple replicas of the same service will define multiple times the same sampler with different uids.
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Identifies a unique Sampler,
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Sampler schema information.
	Schema *Schema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	// The Sampler configuration,
	Config *SamplerConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Statistics related to the Sampler sampling.
	SamplingStats *SamplerSamplingStats `protobuf:"bytes,6,opt,name=sampling_stats,json=samplingStats,proto3" json:"sampling_stats,omitempty"`
}

func (x *Sampler) Reset() {
	*x = Sampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler) ProtoMessage() {}

func (x *Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler.ProtoReflect.Descriptor instead.
func (*Sampler) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{6}
}

func (x *Sampler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sampler) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Sampler) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Sampler) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Sampler) GetConfig() *SamplerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Sampler) GetSamplingStats() *SamplerSamplingStats {
	if x != nil {
		return x.SamplingStats
	}
	return nil
}

type SamplerToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SamplerUid string                 `protobuf:"bytes,2,opt,name=sampler_uid,json=samplerUid,proto3" json:"sampler_uid,omitempty"`
	// Types that are assignable to Message:
	//	*SamplerToServer_SamplerStatsMsg
	//	*SamplerToServer_RegisterReq
	//	*SamplerToServer_ConfRes
	Message isSamplerToServer_Message `protobuf_oneof:"Message"`
}

func (x *SamplerToServer) Reset() {
	*x = SamplerToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerToServer) ProtoMessage() {}

func (x *SamplerToServer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerToServer.ProtoReflect.Descriptor instead.
func (*SamplerToServer) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{7}
}

func (x *SamplerToServer) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SamplerToServer) GetSamplerUid() string {
	if x != nil {
		return x.SamplerUid
	}
	return ""
}

func (m *SamplerToServer) GetMessage() isSamplerToServer_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SamplerToServer) GetSamplerStatsMsg() *SamplerStatsMsg {
	if x, ok := x.GetMessage().(*SamplerToServer_SamplerStatsMsg); ok {
		return x.SamplerStatsMsg
	}
	return nil
}

func (x *SamplerToServer) GetRegisterReq() *SamplerRegisterReq {
	if x, ok := x.GetMessage().(*SamplerToServer_RegisterReq); ok {
		return x.RegisterReq
	}
	return nil
}

func (x *SamplerToServer) GetConfRes() *SamplerConfRes {
	if x, ok := x.GetMessage().(*SamplerToServer_ConfRes); ok {
		return x.ConfRes
	}
	return nil
}

type isSamplerToServer_Message interface {
	isSamplerToServer_Message()
}

type SamplerToServer_SamplerStatsMsg struct {
	// Messages
	SamplerStatsMsg *SamplerStatsMsg `protobuf:"bytes,3,opt,name=sampler_stats_msg,json=samplerStatsMsg,proto3,oneof"`
}

type SamplerToServer_RegisterReq struct {
	// Requests
	RegisterReq *SamplerRegisterReq `protobuf:"bytes,4,opt,name=register_req,json=registerReq,proto3,oneof"`
}

type SamplerToServer_ConfRes struct {
	// Responses
	ConfRes *SamplerConfRes `protobuf:"bytes,5,opt,name=conf_res,json=confRes,proto3,oneof"`
}

func (*SamplerToServer_SamplerStatsMsg) isSamplerToServer_Message() {}

func (*SamplerToServer_RegisterReq) isSamplerToServer_Message() {}

func (*SamplerToServer_ConfRes) isSamplerToServer_Message() {}

type ServerToSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerUid string                 `protobuf:"bytes,2,opt,name=server_uid,json=serverUid,proto3" json:"server_uid,omitempty"`
	// Types that are assignable to Message:
	//	*ServerToSampler_RegisterRes
	//	*ServerToSampler_ConfReq
	Message isServerToSampler_Message `protobuf_oneof:"Message"`
}

func (x *ServerToSampler) Reset() {
	*x = ServerToSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToSampler) ProtoMessage() {}

func (x *ServerToSampler) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToSampler.ProtoReflect.Descriptor instead.
func (*ServerToSampler) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{8}
}

func (x *ServerToSampler) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServerToSampler) GetServerUid() string {
	if x != nil {
		return x.ServerUid
	}
	return ""
}

func (m *ServerToSampler) GetMessage() isServerToSampler_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerToSampler) GetRegisterRes() *SamplerRegisterRes {
	if x, ok := x.GetMessage().(*ServerToSampler_RegisterRes); ok {
		return x.RegisterRes
	}
	return nil
}

func (x *ServerToSampler) GetConfReq() *SamplerConfReq {
	if x, ok := x.GetMessage().(*ServerToSampler_ConfReq); ok {
		return x.ConfReq
	}
	return nil
}

type isServerToSampler_Message interface {
	isServerToSampler_Message()
}

type ServerToSampler_RegisterRes struct {
	// Responses
	RegisterRes *SamplerRegisterRes `protobuf:"bytes,3,opt,name=register_res,json=registerRes,proto3,oneof"`
}

type ServerToSampler_ConfReq struct {
	// Requests
	ConfReq *SamplerConfReq `protobuf:"bytes,4,opt,name=conf_req,json=confReq,proto3,oneof"`
}

func (*ServerToSampler_RegisterRes) isServerToSampler_Message() {}

func (*ServerToSampler_ConfReq) isServerToSampler_Message() {}

type ClientToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientUid string                 `protobuf:"bytes,2,opt,name=client_uid,json=clientUid,proto3" json:"client_uid,omitempty"`
	// Types that are assignable to Message:
	//	*ClientToServer_RegisterReq
	//	*ClientToServer_ListSamplersReq
	//	*ClientToServer_SamplerConfReq
	Message isClientToServer_Message `protobuf_oneof:"Message"`
}

func (x *ClientToServer) Reset() {
	*x = ClientToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer) ProtoMessage() {}

func (x *ClientToServer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer.ProtoReflect.Descriptor instead.
func (*ClientToServer) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{9}
}

func (x *ClientToServer) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ClientToServer) GetClientUid() string {
	if x != nil {
		return x.ClientUid
	}
	return ""
}

func (m *ClientToServer) GetMessage() isClientToServer_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ClientToServer) GetRegisterReq() *ClientRegisterReq {
	if x, ok := x.GetMessage().(*ClientToServer_RegisterReq); ok {
		return x.RegisterReq
	}
	return nil
}

func (x *ClientToServer) GetListSamplersReq() *ClientListSamplersReq {
	if x, ok := x.GetMessage().(*ClientToServer_ListSamplersReq); ok {
		return x.ListSamplersReq
	}
	return nil
}

func (x *ClientToServer) GetSamplerConfReq() *ClientSamplerConfReq {
	if x, ok := x.GetMessage().(*ClientToServer_SamplerConfReq); ok {
		return x.SamplerConfReq
	}
	return nil
}

type isClientToServer_Message interface {
	isClientToServer_Message()
}

type ClientToServer_RegisterReq struct {
	// Requests
	RegisterReq *ClientRegisterReq `protobuf:"bytes,3,opt,name=register_req,json=registerReq,proto3,oneof"`
}

type ClientToServer_ListSamplersReq struct {
	ListSamplersReq *ClientListSamplersReq `protobuf:"bytes,4,opt,name=list_samplers_req,json=listSamplersReq,proto3,oneof"`
}

type ClientToServer_SamplerConfReq struct {
	SamplerConfReq *ClientSamplerConfReq `protobuf:"bytes,5,opt,name=sampler_conf_req,json=samplerConfReq,proto3,oneof"`
}

func (*ClientToServer_RegisterReq) isClientToServer_Message() {}

func (*ClientToServer_ListSamplersReq) isClientToServer_Message() {}

func (*ClientToServer_SamplerConfReq) isClientToServer_Message() {}

type ServerToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerUid string                 `protobuf:"bytes,2,opt,name=server_uid,json=serverUid,proto3" json:"server_uid,omitempty"`
	// Types that are assignable to Message:
	//	*ServerToClient_SamplerStatsMsg
	//	*ServerToClient_RegisterRes
	//	*ServerToClient_ListSamplersRes
	//	*ServerToClient_SamplerConfRes
	Message isServerToClient_Message `protobuf_oneof:"Message"`
}

func (x *ServerToClient) Reset() {
	*x = ServerToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClient) ProtoMessage() {}

func (x *ServerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClient.ProtoReflect.Descriptor instead.
func (*ServerToClient) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{10}
}

func (x *ServerToClient) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServerToClient) GetServerUid() string {
	if x != nil {
		return x.ServerUid
	}
	return ""
}

func (m *ServerToClient) GetMessage() isServerToClient_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerToClient) GetSamplerStatsMsg() *ClientSamplerStatsMsg {
	if x, ok := x.GetMessage().(*ServerToClient_SamplerStatsMsg); ok {
		return x.SamplerStatsMsg
	}
	return nil
}

func (x *ServerToClient) GetRegisterRes() *ClientRegisterRes {
	if x, ok := x.GetMessage().(*ServerToClient_RegisterRes); ok {
		return x.RegisterRes
	}
	return nil
}

func (x *ServerToClient) GetListSamplersRes() *ClientListSamplersRes {
	if x, ok := x.GetMessage().(*ServerToClient_ListSamplersRes); ok {
		return x.ListSamplersRes
	}
	return nil
}

func (x *ServerToClient) GetSamplerConfRes() *ClientSamplerConfRes {
	if x, ok := x.GetMessage().(*ServerToClient_SamplerConfRes); ok {
		return x.SamplerConfRes
	}
	return nil
}

type isServerToClient_Message interface {
	isServerToClient_Message()
}

type ServerToClient_SamplerStatsMsg struct {
	// Messages
	SamplerStatsMsg *ClientSamplerStatsMsg `protobuf:"bytes,3,opt,name=sampler_stats_msg,json=samplerStatsMsg,proto3,oneof"`
}

type ServerToClient_RegisterRes struct {
	// Responses
	RegisterRes *ClientRegisterRes `protobuf:"bytes,4,opt,name=register_res,json=registerRes,proto3,oneof"`
}

type ServerToClient_ListSamplersRes struct {
	ListSamplersRes *ClientListSamplersRes `protobuf:"bytes,5,opt,name=list_samplers_res,json=listSamplersRes,proto3,oneof"`
}

type ServerToClient_SamplerConfRes struct {
	SamplerConfRes *ClientSamplerConfRes `protobuf:"bytes,6,opt,name=sampler_conf_res,json=samplerConfRes,proto3,oneof"`
}

func (*ServerToClient_SamplerStatsMsg) isServerToClient_Message() {}

func (*ServerToClient_RegisterRes) isServerToClient_Message() {}

func (*ServerToClient_ListSamplersRes) isServerToClient_Message() {}

func (*ServerToClient_SamplerConfRes) isServerToClient_Message() {}

type SamplerStatsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingStats *SamplerSamplingStats `protobuf:"bytes,2,opt,name=sampling_stats,json=samplingStats,proto3" json:"sampling_stats,omitempty"`
}

func (x *SamplerStatsMsg) Reset() {
	*x = SamplerStatsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerStatsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerStatsMsg) ProtoMessage() {}

func (x *SamplerStatsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerStatsMsg.ProtoReflect.Descriptor instead.
func (*SamplerStatsMsg) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{11}
}

func (x *SamplerStatsMsg) GetSamplingStats() *SamplerSamplingStats {
	if x != nil {
		return x.SamplingStats
	}
	return nil
}

type SamplerRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerName string            `protobuf:"bytes,1,opt,name=sampler_name,json=samplerName,proto3" json:"sampler_name,omitempty"`
	Resource    string            `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Tags        map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SamplerRegisterReq) Reset() {
	*x = SamplerRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerRegisterReq) ProtoMessage() {}

func (x *SamplerRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerRegisterReq.ProtoReflect.Descriptor instead.
func (*SamplerRegisterReq) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{12}
}

func (x *SamplerRegisterReq) GetSamplerName() string {
	if x != nil {
		return x.SamplerName
	}
	return ""
}

func (x *SamplerRegisterReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *SamplerRegisterReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SamplerRegisterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SamplerRegisterRes) Reset() {
	*x = SamplerRegisterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerRegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerRegisterRes) ProtoMessage() {}

func (x *SamplerRegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerRegisterRes.ProtoReflect.Descriptor instead.
func (*SamplerRegisterRes) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{13}
}

func (x *SamplerRegisterRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type SamplerConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Sampler configuration.
	SamplerConfig *SamplerConfig `protobuf:"bytes,1,opt,name=sampler_config,json=samplerConfig,proto3" json:"sampler_config,omitempty"`
}

func (x *SamplerConfReq) Reset() {
	*x = SamplerConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerConfReq) ProtoMessage() {}

func (x *SamplerConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerConfReq.ProtoReflect.Descriptor instead.
func (*SamplerConfReq) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{14}
}

func (x *SamplerConfReq) GetSamplerConfig() *SamplerConfig {
	if x != nil {
		return x.SamplerConfig
	}
	return nil
}

type SamplerConfRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SamplerConfRes) Reset() {
	*x = SamplerConfRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerConfRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerConfRes) ProtoMessage() {}

func (x *SamplerConfRes) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerConfRes.ProtoReflect.Descriptor instead.
func (*SamplerConfRes) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{15}
}

func (x *SamplerConfRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClientSamplerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerUid    string                `protobuf:"bytes,1,opt,name=sampler_uid,json=samplerUid,proto3" json:"sampler_uid,omitempty"`
	SamplingStats *SamplerSamplingStats `protobuf:"bytes,2,opt,name=sampling_stats,json=samplingStats,proto3" json:"sampling_stats,omitempty"`
}

func (x *ClientSamplerStats) Reset() {
	*x = ClientSamplerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerStats) ProtoMessage() {}

func (x *ClientSamplerStats) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerStats.ProtoReflect.Descriptor instead.
func (*ClientSamplerStats) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{16}
}

func (x *ClientSamplerStats) GetSamplerUid() string {
	if x != nil {
		return x.SamplerUid
	}
	return ""
}

func (x *ClientSamplerStats) GetSamplingStats() *SamplerSamplingStats {
	if x != nil {
		return x.SamplingStats
	}
	return nil
}

type ClientSamplerStatsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerStats []*ClientSamplerStats `protobuf:"bytes,1,rep,name=sampler_stats,json=samplerStats,proto3" json:"sampler_stats,omitempty"`
}

func (x *ClientSamplerStatsMsg) Reset() {
	*x = ClientSamplerStatsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerStatsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerStatsMsg) ProtoMessage() {}

func (x *ClientSamplerStatsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerStatsMsg.ProtoReflect.Descriptor instead.
func (*ClientSamplerStatsMsg) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{17}
}

func (x *ClientSamplerStatsMsg) GetSamplerStats() []*ClientSamplerStats {
	if x != nil {
		return x.SamplerStats
	}
	return nil
}

type ClientRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClientRegisterReq) Reset() {
	*x = ClientRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegisterReq) ProtoMessage() {}

func (x *ClientRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegisterReq.ProtoReflect.Descriptor instead.
func (*ClientRegisterReq) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{18}
}

func (x *ClientRegisterReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ClientRegisterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClientRegisterRes) Reset() {
	*x = ClientRegisterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegisterRes) ProtoMessage() {}

func (x *ClientRegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegisterRes.ProtoReflect.Descriptor instead.
func (*ClientRegisterRes) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{19}
}

func (x *ClientRegisterRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClientListSamplersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientListSamplersReq) Reset() {
	*x = ClientListSamplersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientListSamplersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientListSamplersReq) ProtoMessage() {}

func (x *ClientListSamplersReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientListSamplersReq.ProtoReflect.Descriptor instead.
func (*ClientListSamplersReq) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{20}
}

type ClientListSamplersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Samplers []*Sampler `protobuf:"bytes,2,rep,name=samplers,proto3" json:"samplers,omitempty"`
}

func (x *ClientListSamplersRes) Reset() {
	*x = ClientListSamplersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientListSamplersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientListSamplersRes) ProtoMessage() {}

func (x *ClientListSamplersRes) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientListSamplersRes.ProtoReflect.Descriptor instead.
func (*ClientListSamplersRes) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{21}
}

func (x *ClientListSamplersRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClientListSamplersRes) GetSamplers() []*Sampler {
	if x != nil {
		return x.Samplers
	}
	return nil
}

type ClientSamplingRuleUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op           ClientSamplingRuleUpdate_Op `protobuf:"varint,1,opt,name=op,proto3,enum=ClientSamplingRuleUpdate_Op" json:"op,omitempty"`
	SamplingRule *SamplingRule               `protobuf:"bytes,2,opt,name=sampling_rule,json=samplingRule,proto3" json:"sampling_rule,omitempty"`
}

func (x *ClientSamplingRuleUpdate) Reset() {
	*x = ClientSamplingRuleUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplingRuleUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplingRuleUpdate) ProtoMessage() {}

func (x *ClientSamplingRuleUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplingRuleUpdate.ProtoReflect.Descriptor instead.
func (*ClientSamplingRuleUpdate) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{22}
}

func (x *ClientSamplingRuleUpdate) GetOp() ClientSamplingRuleUpdate_Op {
	if x != nil {
		return x.Op
	}
	return ClientSamplingRuleUpdate_UNKNOWN
}

func (x *ClientSamplingRuleUpdate) GetSamplingRule() *SamplingRule {
	if x != nil {
		return x.SamplingRule
	}
	return nil
}

type ClientSamplerConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingRuleUpdates []*ClientSamplingRuleUpdate `protobuf:"bytes,1,rep,name=sampling_rule_updates,json=samplingRuleUpdates,proto3" json:"sampling_rule_updates,omitempty"`
	SamplingRate        *SamplingRate               `protobuf:"bytes,2,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
}

func (x *ClientSamplerConfigUpdate) Reset() {
	*x = ClientSamplerConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfigUpdate) ProtoMessage() {}

func (x *ClientSamplerConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfigUpdate.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfigUpdate) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{23}
}

func (x *ClientSamplerConfigUpdate) GetSamplingRuleUpdates() []*ClientSamplingRuleUpdate {
	if x != nil {
		return x.SamplingRuleUpdates
	}
	return nil
}

func (x *ClientSamplerConfigUpdate) GetSamplingRate() *SamplingRate {
	if x != nil {
		return x.SamplingRate
	}
	return nil
}

type ClientSamplerConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Samplers to configure. All samplers with the provided name will receive this configuration.
	// It is a mandatory field.
	SamplerName string `protobuf:"bytes,1,opt,name=sampler_name,json=samplerName,proto3" json:"sampler_name,omitempty"`
	// Name of the resource where the sampler is defined
	SamplerResource string `protobuf:"bytes,2,opt,name=sampler_resource,json=samplerResource,proto3" json:"sampler_resource,omitempty"`
	// If sampler_uid is set, only the sampler with the specified uid will be configured.
	SamplerUid string `protobuf:"bytes,3,opt,name=sampler_uid,json=samplerUid,proto3" json:"sampler_uid,omitempty"`
	// The Sampler configuration update.
	SamplerConfigUpdate *ClientSamplerConfigUpdate `protobuf:"bytes,4,opt,name=sampler_config_update,json=samplerConfigUpdate,proto3" json:"sampler_config_update,omitempty"`
}

func (x *ClientSamplerConfReq) Reset() {
	*x = ClientSamplerConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfReq) ProtoMessage() {}

func (x *ClientSamplerConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfReq.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfReq) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{24}
}

func (x *ClientSamplerConfReq) GetSamplerName() string {
	if x != nil {
		return x.SamplerName
	}
	return ""
}

func (x *ClientSamplerConfReq) GetSamplerResource() string {
	if x != nil {
		return x.SamplerResource
	}
	return ""
}

func (x *ClientSamplerConfReq) GetSamplerUid() string {
	if x != nil {
		return x.SamplerUid
	}
	return ""
}

func (x *ClientSamplerConfReq) GetSamplerConfigUpdate() *ClientSamplerConfigUpdate {
	if x != nil {
		return x.SamplerConfigUpdate
	}
	return nil
}

type ClientSamplerConfRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClientSamplerConfRes) Reset() {
	*x = ClientSamplerConfRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_protos_controlplane_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfRes) ProtoMessage() {}

func (x *ClientSamplerConfRes) ProtoReflect() protoreflect.Message {
	mi := &file_internal_protos_controlplane_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfRes.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfRes) Descriptor() ([]byte, []int) {
	return file_internal_protos_controlplane_proto_rawDescGZIP(), []int{25}
}

func (x *ClientSamplerConfRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_internal_protos_controlplane_proto protoreflect.FileDescriptor

var file_internal_protos_controlplane_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x22,
	0x8a, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x20,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x30,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x02,
	0x22, 0xd2, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x2c,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x11,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x52, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xfc, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x11,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x4f, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x35, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x0e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0e, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x31, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x73, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7e, 0x0a,
	0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a,
	0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x5e, 0x0a, 0x15,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x22, 0xa7, 0x01, 0x0a,
	0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x29, 0x0a, 0x02, 0x4f,
	0x70, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x4e, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x37, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x79, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x10, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x32, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x0f, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_protos_controlplane_proto_rawDescOnce sync.Once
	file_internal_protos_controlplane_proto_rawDescData = file_internal_protos_controlplane_proto_rawDesc
)

func file_internal_protos_controlplane_proto_rawDescGZIP() []byte {
	file_internal_protos_controlplane_proto_rawDescOnce.Do(func() {
		file_internal_protos_controlplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_protos_controlplane_proto_rawDescData)
	})
	return file_internal_protos_controlplane_proto_rawDescData
}

var file_internal_protos_controlplane_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_internal_protos_controlplane_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_internal_protos_controlplane_proto_goTypes = []interface{}{
	(Status_Type)(0),                  // 0: Status.Type
	(SamplingRule_Language)(0),        // 1: SamplingRule.Language
	(Schema_Type)(0),                  // 2: Schema.Type
	(ClientSamplingRuleUpdate_Op)(0),  // 3: ClientSamplingRuleUpdate.Op
	(*Status)(nil),                    // 4: Status
	(*SamplingRule)(nil),              // 5: SamplingRule
	(*SamplingRate)(nil),              // 6: SamplingRate
	(*SamplerConfig)(nil),             // 7: SamplerConfig
	(*SamplerSamplingStats)(nil),      // 8: SamplerSamplingStats
	(*Schema)(nil),                    // 9: Schema
	(*Sampler)(nil),                   // 10: Sampler
	(*SamplerToServer)(nil),           // 11: SamplerToServer
	(*ServerToSampler)(nil),           // 12: ServerToSampler
	(*ClientToServer)(nil),            // 13: ClientToServer
	(*ServerToClient)(nil),            // 14: ServerToClient
	(*SamplerStatsMsg)(nil),           // 15: SamplerStatsMsg
	(*SamplerRegisterReq)(nil),        // 16: SamplerRegisterReq
	(*SamplerRegisterRes)(nil),        // 17: SamplerRegisterRes
	(*SamplerConfReq)(nil),            // 18: SamplerConfReq
	(*SamplerConfRes)(nil),            // 19: SamplerConfRes
	(*ClientSamplerStats)(nil),        // 20: ClientSamplerStats
	(*ClientSamplerStatsMsg)(nil),     // 21: ClientSamplerStatsMsg
	(*ClientRegisterReq)(nil),         // 22: ClientRegisterReq
	(*ClientRegisterRes)(nil),         // 23: ClientRegisterRes
	(*ClientListSamplersReq)(nil),     // 24: ClientListSamplersReq
	(*ClientListSamplersRes)(nil),     // 25: ClientListSamplersRes
	(*ClientSamplingRuleUpdate)(nil),  // 26: ClientSamplingRuleUpdate
	(*ClientSamplerConfigUpdate)(nil), // 27: ClientSamplerConfigUpdate
	(*ClientSamplerConfReq)(nil),      // 28: ClientSamplerConfReq
	(*ClientSamplerConfRes)(nil),      // 29: ClientSamplerConfRes
	nil,                               // 30: SamplerRegisterReq.TagsEntry
	nil,                               // 31: ClientRegisterReq.TagsEntry
	(*anypb.Any)(nil),                 // 32: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),     // 33: google.protobuf.Timestamp
}
var file_internal_protos_controlplane_proto_depIdxs = []int32{
	0,  // 0: Status.type:type_name -> Status.Type
	1,  // 1: SamplingRule.language:type_name -> SamplingRule.Language
	5,  // 2: SamplerConfig.sampling_rules:type_name -> SamplingRule
	6,  // 3: SamplerConfig.sampling_rate:type_name -> SamplingRate
	2,  // 4: Schema.type:type_name -> Schema.Type
	32, // 5: Schema.schema:type_name -> google.protobuf.Any
	9,  // 6: Sampler.schema:type_name -> Schema
	7,  // 7: Sampler.config:type_name -> SamplerConfig
	8,  // 8: Sampler.sampling_stats:type_name -> SamplerSamplingStats
	33, // 9: SamplerToServer.timestamp:type_name -> google.protobuf.Timestamp
	15, // 10: SamplerToServer.sampler_stats_msg:type_name -> SamplerStatsMsg
	16, // 11: SamplerToServer.register_req:type_name -> SamplerRegisterReq
	19, // 12: SamplerToServer.conf_res:type_name -> SamplerConfRes
	33, // 13: ServerToSampler.timestamp:type_name -> google.protobuf.Timestamp
	17, // 14: ServerToSampler.register_res:type_name -> SamplerRegisterRes
	18, // 15: ServerToSampler.conf_req:type_name -> SamplerConfReq
	33, // 16: ClientToServer.timestamp:type_name -> google.protobuf.Timestamp
	22, // 17: ClientToServer.register_req:type_name -> ClientRegisterReq
	24, // 18: ClientToServer.list_samplers_req:type_name -> ClientListSamplersReq
	28, // 19: ClientToServer.sampler_conf_req:type_name -> ClientSamplerConfReq
	33, // 20: ServerToClient.timestamp:type_name -> google.protobuf.Timestamp
	21, // 21: ServerToClient.sampler_stats_msg:type_name -> ClientSamplerStatsMsg
	23, // 22: ServerToClient.register_res:type_name -> ClientRegisterRes
	25, // 23: ServerToClient.list_samplers_res:type_name -> ClientListSamplersRes
	29, // 24: ServerToClient.sampler_conf_res:type_name -> ClientSamplerConfRes
	8,  // 25: SamplerStatsMsg.sampling_stats:type_name -> SamplerSamplingStats
	30, // 26: SamplerRegisterReq.tags:type_name -> SamplerRegisterReq.TagsEntry
	4,  // 27: SamplerRegisterRes.status:type_name -> Status
	7,  // 28: SamplerConfReq.sampler_config:type_name -> SamplerConfig
	4,  // 29: SamplerConfRes.status:type_name -> Status
	8,  // 30: ClientSamplerStats.sampling_stats:type_name -> SamplerSamplingStats
	20, // 31: ClientSamplerStatsMsg.sampler_stats:type_name -> ClientSamplerStats
	31, // 32: ClientRegisterReq.tags:type_name -> ClientRegisterReq.TagsEntry
	4,  // 33: ClientRegisterRes.status:type_name -> Status
	4,  // 34: ClientListSamplersRes.status:type_name -> Status
	10, // 35: ClientListSamplersRes.samplers:type_name -> Sampler
	3,  // 36: ClientSamplingRuleUpdate.op:type_name -> ClientSamplingRuleUpdate.Op
	5,  // 37: ClientSamplingRuleUpdate.sampling_rule:type_name -> SamplingRule
	26, // 38: ClientSamplerConfigUpdate.sampling_rule_updates:type_name -> ClientSamplingRuleUpdate
	6,  // 39: ClientSamplerConfigUpdate.sampling_rate:type_name -> SamplingRate
	27, // 40: ClientSamplerConfReq.sampler_config_update:type_name -> ClientSamplerConfigUpdate
	4,  // 41: ClientSamplerConfRes.status:type_name -> Status
	11, // 42: ControlPlane.SamplerConn:input_type -> SamplerToServer
	13, // 43: ControlPlane.ClientConn:input_type -> ClientToServer
	12, // 44: ControlPlane.SamplerConn:output_type -> ServerToSampler
	14, // 45: ControlPlane.ClientConn:output_type -> ServerToClient
	44, // [44:46] is the sub-list for method output_type
	42, // [42:44] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_internal_protos_controlplane_proto_init() }
func file_internal_protos_controlplane_proto_init() {
	if File_internal_protos_controlplane_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_protos_controlplane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplingRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerSamplingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerStatsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerRegisterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerConfRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerStatsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegisterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientListSamplersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientListSamplersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplingRuleUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_protos_controlplane_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_protos_controlplane_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SamplerToServer_SamplerStatsMsg)(nil),
		(*SamplerToServer_RegisterReq)(nil),
		(*SamplerToServer_ConfRes)(nil),
	}
	file_internal_protos_controlplane_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ServerToSampler_RegisterRes)(nil),
		(*ServerToSampler_ConfReq)(nil),
	}
	file_internal_protos_controlplane_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ClientToServer_RegisterReq)(nil),
		(*ClientToServer_ListSamplersReq)(nil),
		(*ClientToServer_SamplerConfReq)(nil),
	}
	file_internal_protos_controlplane_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ServerToClient_SamplerStatsMsg)(nil),
		(*ServerToClient_RegisterRes)(nil),
		(*ServerToClient_ListSamplersRes)(nil),
		(*ServerToClient_SamplerConfRes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_protos_controlplane_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_protos_controlplane_proto_goTypes,
		DependencyIndexes: file_internal_protos_controlplane_proto_depIdxs,
		EnumInfos:         file_internal_protos_controlplane_proto_enumTypes,
		MessageInfos:      file_internal_protos_controlplane_proto_msgTypes,
	}.Build()
	File_internal_protos_controlplane_proto = out.File
	file_internal_protos_controlplane_proto_rawDesc = nil
	file_internal_protos_controlplane_proto_goTypes = nil
	file_internal_protos_controlplane_proto_depIdxs = nil
}
