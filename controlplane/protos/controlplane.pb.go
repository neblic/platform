// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.6
// source: protos/controlplane.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status_Type int32

const (
	Status_UNKNOWN     Status_Type = 0
	Status_OK          Status_Type = 1
	Status_BAD_REQUEST Status_Type = 2
)

// Enum value maps for Status_Type.
var (
	Status_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "BAD_REQUEST",
	}
	Status_Type_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"BAD_REQUEST": 2,
	}
)

func (x Status_Type) Enum() *Status_Type {
	p := new(Status_Type)
	*p = x
	return p
}

func (x Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_controlplane_proto_enumTypes[0].Descriptor()
}

func (Status_Type) Type() protoreflect.EnumType {
	return &file_protos_controlplane_proto_enumTypes[0]
}

func (x Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_Type.Descriptor instead.
func (Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{0, 0}
}

type Stream_Rule_Language int32

const (
	Stream_Rule_UNKNOWN Stream_Rule_Language = 0
	Stream_Rule_CEL     Stream_Rule_Language = 1
)

// Enum value maps for Stream_Rule_Language.
var (
	Stream_Rule_Language_name = map[int32]string{
		0: "UNKNOWN",
		1: "CEL",
	}
	Stream_Rule_Language_value = map[string]int32{
		"UNKNOWN": 0,
		"CEL":     1,
	}
)

func (x Stream_Rule_Language) Enum() *Stream_Rule_Language {
	p := new(Stream_Rule_Language)
	*p = x
	return p
}

func (x Stream_Rule_Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stream_Rule_Language) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_controlplane_proto_enumTypes[1].Descriptor()
}

func (Stream_Rule_Language) Type() protoreflect.EnumType {
	return &file_protos_controlplane_proto_enumTypes[1]
}

func (x Stream_Rule_Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stream_Rule_Language.Descriptor instead.
func (Stream_Rule_Language) EnumDescriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{4, 0, 0}
}

type Schema_Type int32

const (
	Schema_SCHEMALESS Schema_Type = 0
	Schema_NATIVE     Schema_Type = 1
	Schema_PROTOBUF   Schema_Type = 2
)

// Enum value maps for Schema_Type.
var (
	Schema_Type_name = map[int32]string{
		0: "SCHEMALESS",
		1: "NATIVE",
		2: "PROTOBUF",
	}
	Schema_Type_value = map[string]int32{
		"SCHEMALESS": 0,
		"NATIVE":     1,
		"PROTOBUF":   2,
	}
)

func (x Schema_Type) Enum() *Schema_Type {
	p := new(Schema_Type)
	*p = x
	return p
}

func (x Schema_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_controlplane_proto_enumTypes[2].Descriptor()
}

func (Schema_Type) Type() protoreflect.EnumType {
	return &file_protos_controlplane_proto_enumTypes[2]
}

func (x Schema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Type.Descriptor instead.
func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{8, 0}
}

type ClientStreamUpdate_Op int32

const (
	ClientStreamUpdate_UNKNOWN ClientStreamUpdate_Op = 0
	ClientStreamUpdate_UPSERT  ClientStreamUpdate_Op = 1
	ClientStreamUpdate_DELETE  ClientStreamUpdate_Op = 2
)

// Enum value maps for ClientStreamUpdate_Op.
var (
	ClientStreamUpdate_Op_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPSERT",
		2: "DELETE",
	}
	ClientStreamUpdate_Op_value = map[string]int32{
		"UNKNOWN": 0,
		"UPSERT":  1,
		"DELETE":  2,
	}
)

func (x ClientStreamUpdate_Op) Enum() *ClientStreamUpdate_Op {
	p := new(ClientStreamUpdate_Op)
	*p = x
	return p
}

func (x ClientStreamUpdate_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientStreamUpdate_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_controlplane_proto_enumTypes[3].Descriptor()
}

func (ClientStreamUpdate_Op) Type() protoreflect.EnumType {
	return &file_protos_controlplane_proto_enumTypes[3]
}

func (x ClientStreamUpdate_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientStreamUpdate_Op.Descriptor instead.
func (ClientStreamUpdate_Op) EnumDescriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{25, 0}
}

type ClientDigestUpdate_Op int32

const (
	ClientDigestUpdate_UNKNOWN ClientDigestUpdate_Op = 0
	ClientDigestUpdate_UPSERT  ClientDigestUpdate_Op = 1
	ClientDigestUpdate_DELETE  ClientDigestUpdate_Op = 2
)

// Enum value maps for ClientDigestUpdate_Op.
var (
	ClientDigestUpdate_Op_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPSERT",
		2: "DELETE",
	}
	ClientDigestUpdate_Op_value = map[string]int32{
		"UNKNOWN": 0,
		"UPSERT":  1,
		"DELETE":  2,
	}
)

func (x ClientDigestUpdate_Op) Enum() *ClientDigestUpdate_Op {
	p := new(ClientDigestUpdate_Op)
	*p = x
	return p
}

func (x ClientDigestUpdate_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientDigestUpdate_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_controlplane_proto_enumTypes[4].Descriptor()
}

func (ClientDigestUpdate_Op) Type() protoreflect.EnumType {
	return &file_protos_controlplane_proto_enumTypes[4]
}

func (x ClientDigestUpdate_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientDigestUpdate_Op.Descriptor instead.
func (ClientDigestUpdate_Op) EnumDescriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{26, 0}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Status_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Status_Type" json:"type,omitempty"`
	ErrorMessage string      `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetType() Status_Type {
	if x != nil {
		return x.Type
	}
	return Status_UNKNOWN
}

func (x *Status) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeterministicSampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the minimum sample_rate valid value is 1 (all samples)
	SampleRate             int32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	SampleEmptyDeterminant bool  `protobuf:"varint,2,opt,name=sample_empty_determinant,json=sampleEmptyDeterminant,proto3" json:"sample_empty_determinant,omitempty"`
}

func (x *DeterministicSampling) Reset() {
	*x = DeterministicSampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeterministicSampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeterministicSampling) ProtoMessage() {}

func (x *DeterministicSampling) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeterministicSampling.ProtoReflect.Descriptor instead.
func (*DeterministicSampling) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{1}
}

func (x *DeterministicSampling) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *DeterministicSampling) GetSampleEmptyDeterminant() bool {
	if x != nil {
		return x.SampleEmptyDeterminant
	}
	return false
}

type Sampling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sampling:
	//	*Sampling_DeterministicSampling
	Sampling isSampling_Sampling `protobuf_oneof:"Sampling"`
}

func (x *Sampling) Reset() {
	*x = Sampling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampling) ProtoMessage() {}

func (x *Sampling) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampling.ProtoReflect.Descriptor instead.
func (*Sampling) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{2}
}

func (m *Sampling) GetSampling() isSampling_Sampling {
	if m != nil {
		return m.Sampling
	}
	return nil
}

func (x *Sampling) GetDeterministicSampling() *DeterministicSampling {
	if x, ok := x.GetSampling().(*Sampling_DeterministicSampling); ok {
		return x.DeterministicSampling
	}
	return nil
}

type isSampling_Sampling interface {
	isSampling_Sampling()
}

type Sampling_DeterministicSampling struct {
	DeterministicSampling *DeterministicSampling `protobuf:"bytes,1,opt,name=deterministic_sampling,json=deterministicSampling,proto3,oneof"`
}

func (*Sampling_DeterministicSampling) isSampling_Sampling() {}

type Limiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// limit determines the maximum number of exported samples per second.
	// -1 means no exported samples limit
	// 0 means no samples will be exported
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Limiter) Reset() {
	*x = Limiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limiter) ProtoMessage() {}

func (x *Limiter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limiter.ProtoReflect.Descriptor instead.
func (*Limiter) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{3}
}

func (x *Limiter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Rule *Stream_Rule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{4}
}

func (x *Stream) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Stream) GetRule() *Stream_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type Digest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StreamUid   string               `protobuf:"bytes,2,opt,name=stream_uid,json=streamUid,proto3" json:"stream_uid,omitempty"`
	FlushPeriod *durationpb.Duration `protobuf:"bytes,3,opt,name=flush_period,json=flushPeriod,proto3" json:"flush_period,omitempty"`
	BufferSize  int32                `protobuf:"varint,4,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	// Types that are assignable to Type:
	//	*Digest_St_
	Type isDigest_Type `protobuf_oneof:"Type"`
}

func (x *Digest) Reset() {
	*x = Digest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digest) ProtoMessage() {}

func (x *Digest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digest.ProtoReflect.Descriptor instead.
func (*Digest) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{5}
}

func (x *Digest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Digest) GetStreamUid() string {
	if x != nil {
		return x.StreamUid
	}
	return ""
}

func (x *Digest) GetFlushPeriod() *durationpb.Duration {
	if x != nil {
		return x.FlushPeriod
	}
	return nil
}

func (x *Digest) GetBufferSize() int32 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

func (m *Digest) GetType() isDigest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Digest) GetSt() *Digest_St {
	if x, ok := x.GetType().(*Digest_St_); ok {
		return x.St
	}
	return nil
}

type isDigest_Type interface {
	isDigest_Type()
}

type Digest_St_ struct {
	St *Digest_St `protobuf:"bytes,5,opt,name=st,proto3,oneof"`
}

func (*Digest_St_) isDigest_Type() {}

// Used to get and update the sampler configuration.
//
// When sent by the server to update a sampler, only the fields that are present
// are updated. If a field is present, the previous value is replaced with the
// new one.
//
// If the configuration option is configured from the client the process is as
// follows:
// * Add new option to SamplerConfig
// * Update platform/controlplane/data package to include new option to the
//   internal controlplane structs
// * Make sure new option can be set with the ClientSamplerConfigUpdate message
// * Update at package platform/controlplane/server/internal/registry the method
//   Client.UpdateSamplerConfig so the new option gets set in the server
//   registry
// * Update neblictl if the option can be configured using the CLI
type SamplerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configures the sampler streams.
	Streams []*Stream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	// Sets an upper bound to the amount of samples that will be processed by the
	// sampler. It protects the application from an excessive CPU usage due to the
	// sampler processing a large amount of samples.
	LimiterIn *Limiter `protobuf:"bytes,2,opt,name=limiter_in,json=limiterIn,proto3" json:"limiter_in,omitempty"`
	// Defines the sampling strategy to apply when a sample is received and before
	// processing it in any way (e.g. before determining if a sample belongs to a
	// stream which would require parsing it and evaluating the stream rules).
	// Sampling is performed after limiter_in has been applied.
	SamplingIn *Sampling `protobuf:"bytes,3,opt,name=sampling_in,json=samplingIn,proto3" json:"sampling_in,omitempty"`
	// Sets an upper bound to the amount of samples that will be exported by the
	// sampler. It protects the application from overloading the network due to
	// the sampler exporting a large amount of samples.
	LimiterOut *Limiter `protobuf:"bytes,4,opt,name=limiter_out,json=limiterOut,proto3" json:"limiter_out,omitempty"`
	// Configure the sampler digests.
	Digests []*Digest `protobuf:"bytes,5,rep,name=digests,proto3" json:"digests,omitempty"`
}

func (x *SamplerConfig) Reset() {
	*x = SamplerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerConfig) ProtoMessage() {}

func (x *SamplerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerConfig.ProtoReflect.Descriptor instead.
func (*SamplerConfig) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{6}
}

func (x *SamplerConfig) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *SamplerConfig) GetLimiterIn() *Limiter {
	if x != nil {
		return x.LimiterIn
	}
	return nil
}

func (x *SamplerConfig) GetSamplingIn() *Sampling {
	if x != nil {
		return x.SamplingIn
	}
	return nil
}

func (x *SamplerConfig) GetLimiterOut() *Limiter {
	if x != nil {
		return x.LimiterOut
	}
	return nil
}

func (x *SamplerConfig) GetDigests() []*Digest {
	if x != nil {
		return x.Digests
	}
	return nil
}

type SamplerSamplingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplesEvaluated uint64 `protobuf:"varint,1,opt,name=samples_evaluated,json=samplesEvaluated,proto3" json:"samples_evaluated,omitempty"`
	SamplesExported  uint64 `protobuf:"varint,2,opt,name=samples_exported,json=samplesExported,proto3" json:"samples_exported,omitempty"`
}

func (x *SamplerSamplingStats) Reset() {
	*x = SamplerSamplingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerSamplingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerSamplingStats) ProtoMessage() {}

func (x *SamplerSamplingStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerSamplingStats.ProtoReflect.Descriptor instead.
func (*SamplerSamplingStats) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{7}
}

func (x *SamplerSamplingStats) GetSamplesEvaluated() uint64 {
	if x != nil {
		return x.SamplesEvaluated
	}
	return 0
}

func (x *SamplerSamplingStats) GetSamplesExported() uint64 {
	if x != nil {
		return x.SamplesExported
	}
	return 0
}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Schema_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Schema_Type" json:"type,omitempty"`
	Schema *anypb.Any  `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{8}
}

func (x *Schema) GetType() Schema_Type {
	if x != nil {
		return x.Type
	}
	return Schema_SCHEMALESS
}

func (x *Schema) GetSchema() *anypb.Any {
	if x != nil {
		return x.Schema
	}
	return nil
}

type Sampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User-friendly and user-defined name to identify a Sampler.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Defines the Sampler resource where it has been defined.
	// Multiple samplers can have the same name and resource but will hav
	// edifferent uids. e.g. multiple replicas of the same service will define
	// multiple times the same sampler with different uids.
	Resource string `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Identifies a unique Sampler,
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Sampler schema information.
	Schema *Schema `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	// The Sampler configuration,
	Config *SamplerConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Statistics related to the Sampler sampling.
	SamplingStats *SamplerSamplingStats `protobuf:"bytes,6,opt,name=sampling_stats,json=samplingStats,proto3" json:"sampling_stats,omitempty"`
}

func (x *Sampler) Reset() {
	*x = Sampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler) ProtoMessage() {}

func (x *Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler.ProtoReflect.Descriptor instead.
func (*Sampler) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{9}
}

func (x *Sampler) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sampler) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Sampler) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Sampler) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Sampler) GetConfig() *SamplerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Sampler) GetSamplingStats() *SamplerSamplingStats {
	if x != nil {
		return x.SamplingStats
	}
	return nil
}

type SamplerToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SamplerUid string                 `protobuf:"bytes,2,opt,name=sampler_uid,json=samplerUid,proto3" json:"sampler_uid,omitempty"`
	// Types that are assignable to Message:
	//	*SamplerToServer_SamplerStatsMsg
	//	*SamplerToServer_RegisterReq
	//	*SamplerToServer_ConfRes
	Message isSamplerToServer_Message `protobuf_oneof:"Message"`
}

func (x *SamplerToServer) Reset() {
	*x = SamplerToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerToServer) ProtoMessage() {}

func (x *SamplerToServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerToServer.ProtoReflect.Descriptor instead.
func (*SamplerToServer) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{10}
}

func (x *SamplerToServer) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SamplerToServer) GetSamplerUid() string {
	if x != nil {
		return x.SamplerUid
	}
	return ""
}

func (m *SamplerToServer) GetMessage() isSamplerToServer_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *SamplerToServer) GetSamplerStatsMsg() *SamplerStatsMsg {
	if x, ok := x.GetMessage().(*SamplerToServer_SamplerStatsMsg); ok {
		return x.SamplerStatsMsg
	}
	return nil
}

func (x *SamplerToServer) GetRegisterReq() *SamplerRegisterReq {
	if x, ok := x.GetMessage().(*SamplerToServer_RegisterReq); ok {
		return x.RegisterReq
	}
	return nil
}

func (x *SamplerToServer) GetConfRes() *ServerSamplerConfRes {
	if x, ok := x.GetMessage().(*SamplerToServer_ConfRes); ok {
		return x.ConfRes
	}
	return nil
}

type isSamplerToServer_Message interface {
	isSamplerToServer_Message()
}

type SamplerToServer_SamplerStatsMsg struct {
	// Messages
	SamplerStatsMsg *SamplerStatsMsg `protobuf:"bytes,3,opt,name=sampler_stats_msg,json=samplerStatsMsg,proto3,oneof"`
}

type SamplerToServer_RegisterReq struct {
	// Requests
	RegisterReq *SamplerRegisterReq `protobuf:"bytes,4,opt,name=register_req,json=registerReq,proto3,oneof"`
}

type SamplerToServer_ConfRes struct {
	// Responses
	ConfRes *ServerSamplerConfRes `protobuf:"bytes,5,opt,name=conf_res,json=confRes,proto3,oneof"`
}

func (*SamplerToServer_SamplerStatsMsg) isSamplerToServer_Message() {}

func (*SamplerToServer_RegisterReq) isSamplerToServer_Message() {}

func (*SamplerToServer_ConfRes) isSamplerToServer_Message() {}

type ServerToSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerUid string                 `protobuf:"bytes,2,opt,name=server_uid,json=serverUid,proto3" json:"server_uid,omitempty"`
	// Types that are assignable to Message:
	//	*ServerToSampler_RegisterRes
	//	*ServerToSampler_ConfReq
	Message isServerToSampler_Message `protobuf_oneof:"Message"`
}

func (x *ServerToSampler) Reset() {
	*x = ServerToSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToSampler) ProtoMessage() {}

func (x *ServerToSampler) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToSampler.ProtoReflect.Descriptor instead.
func (*ServerToSampler) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{11}
}

func (x *ServerToSampler) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServerToSampler) GetServerUid() string {
	if x != nil {
		return x.ServerUid
	}
	return ""
}

func (m *ServerToSampler) GetMessage() isServerToSampler_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerToSampler) GetRegisterRes() *SamplerRegisterRes {
	if x, ok := x.GetMessage().(*ServerToSampler_RegisterRes); ok {
		return x.RegisterRes
	}
	return nil
}

func (x *ServerToSampler) GetConfReq() *ServerSamplerConfReq {
	if x, ok := x.GetMessage().(*ServerToSampler_ConfReq); ok {
		return x.ConfReq
	}
	return nil
}

type isServerToSampler_Message interface {
	isServerToSampler_Message()
}

type ServerToSampler_RegisterRes struct {
	// Responses
	RegisterRes *SamplerRegisterRes `protobuf:"bytes,3,opt,name=register_res,json=registerRes,proto3,oneof"`
}

type ServerToSampler_ConfReq struct {
	// Requests
	ConfReq *ServerSamplerConfReq `protobuf:"bytes,4,opt,name=conf_req,json=confReq,proto3,oneof"`
}

func (*ServerToSampler_RegisterRes) isServerToSampler_Message() {}

func (*ServerToSampler_ConfReq) isServerToSampler_Message() {}

type ClientToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientUid string                 `protobuf:"bytes,2,opt,name=client_uid,json=clientUid,proto3" json:"client_uid,omitempty"`
	// Types that are assignable to Message:
	//	*ClientToServer_RegisterReq
	//	*ClientToServer_ListSamplersReq
	//	*ClientToServer_SamplerConfReq
	Message isClientToServer_Message `protobuf_oneof:"Message"`
}

func (x *ClientToServer) Reset() {
	*x = ClientToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer) ProtoMessage() {}

func (x *ClientToServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer.ProtoReflect.Descriptor instead.
func (*ClientToServer) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{12}
}

func (x *ClientToServer) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ClientToServer) GetClientUid() string {
	if x != nil {
		return x.ClientUid
	}
	return ""
}

func (m *ClientToServer) GetMessage() isClientToServer_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ClientToServer) GetRegisterReq() *ClientRegisterReq {
	if x, ok := x.GetMessage().(*ClientToServer_RegisterReq); ok {
		return x.RegisterReq
	}
	return nil
}

func (x *ClientToServer) GetListSamplersReq() *ClientListSamplersReq {
	if x, ok := x.GetMessage().(*ClientToServer_ListSamplersReq); ok {
		return x.ListSamplersReq
	}
	return nil
}

func (x *ClientToServer) GetSamplerConfReq() *ClientSamplerConfReq {
	if x, ok := x.GetMessage().(*ClientToServer_SamplerConfReq); ok {
		return x.SamplerConfReq
	}
	return nil
}

type isClientToServer_Message interface {
	isClientToServer_Message()
}

type ClientToServer_RegisterReq struct {
	// Requests
	RegisterReq *ClientRegisterReq `protobuf:"bytes,3,opt,name=register_req,json=registerReq,proto3,oneof"`
}

type ClientToServer_ListSamplersReq struct {
	ListSamplersReq *ClientListSamplersReq `protobuf:"bytes,4,opt,name=list_samplers_req,json=listSamplersReq,proto3,oneof"`
}

type ClientToServer_SamplerConfReq struct {
	SamplerConfReq *ClientSamplerConfReq `protobuf:"bytes,5,opt,name=sampler_conf_req,json=samplerConfReq,proto3,oneof"`
}

func (*ClientToServer_RegisterReq) isClientToServer_Message() {}

func (*ClientToServer_ListSamplersReq) isClientToServer_Message() {}

func (*ClientToServer_SamplerConfReq) isClientToServer_Message() {}

type ServerToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerUid string                 `protobuf:"bytes,2,opt,name=server_uid,json=serverUid,proto3" json:"server_uid,omitempty"`
	// Types that are assignable to Message:
	//	*ServerToClient_SamplerStatsMsg
	//	*ServerToClient_RegisterRes
	//	*ServerToClient_ListSamplersRes
	//	*ServerToClient_SamplerConfRes
	Message isServerToClient_Message `protobuf_oneof:"Message"`
}

func (x *ServerToClient) Reset() {
	*x = ServerToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClient) ProtoMessage() {}

func (x *ServerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClient.ProtoReflect.Descriptor instead.
func (*ServerToClient) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{13}
}

func (x *ServerToClient) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ServerToClient) GetServerUid() string {
	if x != nil {
		return x.ServerUid
	}
	return ""
}

func (m *ServerToClient) GetMessage() isServerToClient_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerToClient) GetSamplerStatsMsg() *ClientSamplerStatsMsg {
	if x, ok := x.GetMessage().(*ServerToClient_SamplerStatsMsg); ok {
		return x.SamplerStatsMsg
	}
	return nil
}

func (x *ServerToClient) GetRegisterRes() *ClientRegisterRes {
	if x, ok := x.GetMessage().(*ServerToClient_RegisterRes); ok {
		return x.RegisterRes
	}
	return nil
}

func (x *ServerToClient) GetListSamplersRes() *ClientListSamplersRes {
	if x, ok := x.GetMessage().(*ServerToClient_ListSamplersRes); ok {
		return x.ListSamplersRes
	}
	return nil
}

func (x *ServerToClient) GetSamplerConfRes() *ClientSamplerConfRes {
	if x, ok := x.GetMessage().(*ServerToClient_SamplerConfRes); ok {
		return x.SamplerConfRes
	}
	return nil
}

type isServerToClient_Message interface {
	isServerToClient_Message()
}

type ServerToClient_SamplerStatsMsg struct {
	// Messages
	SamplerStatsMsg *ClientSamplerStatsMsg `protobuf:"bytes,3,opt,name=sampler_stats_msg,json=samplerStatsMsg,proto3,oneof"`
}

type ServerToClient_RegisterRes struct {
	// Responses
	RegisterRes *ClientRegisterRes `protobuf:"bytes,4,opt,name=register_res,json=registerRes,proto3,oneof"`
}

type ServerToClient_ListSamplersRes struct {
	ListSamplersRes *ClientListSamplersRes `protobuf:"bytes,5,opt,name=list_samplers_res,json=listSamplersRes,proto3,oneof"`
}

type ServerToClient_SamplerConfRes struct {
	SamplerConfRes *ClientSamplerConfRes `protobuf:"bytes,6,opt,name=sampler_conf_res,json=samplerConfRes,proto3,oneof"`
}

func (*ServerToClient_SamplerStatsMsg) isServerToClient_Message() {}

func (*ServerToClient_RegisterRes) isServerToClient_Message() {}

func (*ServerToClient_ListSamplersRes) isServerToClient_Message() {}

func (*ServerToClient_SamplerConfRes) isServerToClient_Message() {}

type SamplerStatsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingStats *SamplerSamplingStats `protobuf:"bytes,2,opt,name=sampling_stats,json=samplingStats,proto3" json:"sampling_stats,omitempty"`
}

func (x *SamplerStatsMsg) Reset() {
	*x = SamplerStatsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerStatsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerStatsMsg) ProtoMessage() {}

func (x *SamplerStatsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerStatsMsg.ProtoReflect.Descriptor instead.
func (*SamplerStatsMsg) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{14}
}

func (x *SamplerStatsMsg) GetSamplingStats() *SamplerSamplingStats {
	if x != nil {
		return x.SamplingStats
	}
	return nil
}

type SamplerRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerName string            `protobuf:"bytes,1,opt,name=sampler_name,json=samplerName,proto3" json:"sampler_name,omitempty"`
	Resource    string            `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	Tags        map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SamplerRegisterReq) Reset() {
	*x = SamplerRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerRegisterReq) ProtoMessage() {}

func (x *SamplerRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerRegisterReq.ProtoReflect.Descriptor instead.
func (*SamplerRegisterReq) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{15}
}

func (x *SamplerRegisterReq) GetSamplerName() string {
	if x != nil {
		return x.SamplerName
	}
	return ""
}

func (x *SamplerRegisterReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *SamplerRegisterReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SamplerRegisterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SamplerRegisterRes) Reset() {
	*x = SamplerRegisterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplerRegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplerRegisterRes) ProtoMessage() {}

func (x *SamplerRegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplerRegisterRes.ProtoReflect.Descriptor instead.
func (*SamplerRegisterRes) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{16}
}

func (x *SamplerRegisterRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ServerSamplerConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Sampler configuration.
	SamplerConfig *SamplerConfig `protobuf:"bytes,1,opt,name=sampler_config,json=samplerConfig,proto3" json:"sampler_config,omitempty"`
}

func (x *ServerSamplerConfReq) Reset() {
	*x = ServerSamplerConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSamplerConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSamplerConfReq) ProtoMessage() {}

func (x *ServerSamplerConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSamplerConfReq.ProtoReflect.Descriptor instead.
func (*ServerSamplerConfReq) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{17}
}

func (x *ServerSamplerConfReq) GetSamplerConfig() *SamplerConfig {
	if x != nil {
		return x.SamplerConfig
	}
	return nil
}

type ServerSamplerConfRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ServerSamplerConfRes) Reset() {
	*x = ServerSamplerConfRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSamplerConfRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSamplerConfRes) ProtoMessage() {}

func (x *ServerSamplerConfRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSamplerConfRes.ProtoReflect.Descriptor instead.
func (*ServerSamplerConfRes) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{18}
}

func (x *ServerSamplerConfRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClientSamplerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerUid    string                `protobuf:"bytes,1,opt,name=sampler_uid,json=samplerUid,proto3" json:"sampler_uid,omitempty"`
	SamplingStats *SamplerSamplingStats `protobuf:"bytes,2,opt,name=sampling_stats,json=samplingStats,proto3" json:"sampling_stats,omitempty"`
}

func (x *ClientSamplerStats) Reset() {
	*x = ClientSamplerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerStats) ProtoMessage() {}

func (x *ClientSamplerStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerStats.ProtoReflect.Descriptor instead.
func (*ClientSamplerStats) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{19}
}

func (x *ClientSamplerStats) GetSamplerUid() string {
	if x != nil {
		return x.SamplerUid
	}
	return ""
}

func (x *ClientSamplerStats) GetSamplingStats() *SamplerSamplingStats {
	if x != nil {
		return x.SamplingStats
	}
	return nil
}

type ClientSamplerStatsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplerStats []*ClientSamplerStats `protobuf:"bytes,1,rep,name=sampler_stats,json=samplerStats,proto3" json:"sampler_stats,omitempty"`
}

func (x *ClientSamplerStatsMsg) Reset() {
	*x = ClientSamplerStatsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerStatsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerStatsMsg) ProtoMessage() {}

func (x *ClientSamplerStatsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerStatsMsg.ProtoReflect.Descriptor instead.
func (*ClientSamplerStatsMsg) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{20}
}

func (x *ClientSamplerStatsMsg) GetSamplerStats() []*ClientSamplerStats {
	if x != nil {
		return x.SamplerStats
	}
	return nil
}

type ClientRegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClientRegisterReq) Reset() {
	*x = ClientRegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegisterReq) ProtoMessage() {}

func (x *ClientRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegisterReq.ProtoReflect.Descriptor instead.
func (*ClientRegisterReq) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{21}
}

func (x *ClientRegisterReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ClientRegisterRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClientRegisterRes) Reset() {
	*x = ClientRegisterRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRegisterRes) ProtoMessage() {}

func (x *ClientRegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRegisterRes.ProtoReflect.Descriptor instead.
func (*ClientRegisterRes) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{22}
}

func (x *ClientRegisterRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ClientListSamplersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClientListSamplersReq) Reset() {
	*x = ClientListSamplersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientListSamplersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientListSamplersReq) ProtoMessage() {}

func (x *ClientListSamplersReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientListSamplersReq.ProtoReflect.Descriptor instead.
func (*ClientListSamplersReq) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{23}
}

type ClientListSamplersRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Samplers []*Sampler `protobuf:"bytes,2,rep,name=samplers,proto3" json:"samplers,omitempty"`
}

func (x *ClientListSamplersRes) Reset() {
	*x = ClientListSamplersRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientListSamplersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientListSamplersRes) ProtoMessage() {}

func (x *ClientListSamplersRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientListSamplersRes.ProtoReflect.Descriptor instead.
func (*ClientListSamplersRes) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{24}
}

func (x *ClientListSamplersRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ClientListSamplersRes) GetSamplers() []*Sampler {
	if x != nil {
		return x.Samplers
	}
	return nil
}

type ClientStreamUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     ClientStreamUpdate_Op `protobuf:"varint,1,opt,name=op,proto3,enum=ClientStreamUpdate_Op" json:"op,omitempty"`
	Stream *Stream               `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *ClientStreamUpdate) Reset() {
	*x = ClientStreamUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStreamUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStreamUpdate) ProtoMessage() {}

func (x *ClientStreamUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStreamUpdate.ProtoReflect.Descriptor instead.
func (*ClientStreamUpdate) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{25}
}

func (x *ClientStreamUpdate) GetOp() ClientStreamUpdate_Op {
	if x != nil {
		return x.Op
	}
	return ClientStreamUpdate_UNKNOWN
}

func (x *ClientStreamUpdate) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type ClientDigestUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     ClientDigestUpdate_Op `protobuf:"varint,1,opt,name=op,proto3,enum=ClientDigestUpdate_Op" json:"op,omitempty"`
	Digest *Digest               `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ClientDigestUpdate) Reset() {
	*x = ClientDigestUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDigestUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDigestUpdate) ProtoMessage() {}

func (x *ClientDigestUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDigestUpdate.ProtoReflect.Descriptor instead.
func (*ClientDigestUpdate) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{26}
}

func (x *ClientDigestUpdate) GetOp() ClientDigestUpdate_Op {
	if x != nil {
		return x.Op
	}
	return ClientDigestUpdate_UNKNOWN
}

func (x *ClientDigestUpdate) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

type ClientSamplerConfigUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reset_ *ClientSamplerConfigUpdate_Reset `protobuf:"bytes,1,opt,name=reset,proto3" json:"reset,omitempty"`
	// All fields are optional. If a field is nil, it means that the field will
	// not be updated.
	StreamUpdates []*ClientStreamUpdate `protobuf:"bytes,2,rep,name=stream_updates,json=streamUpdates,proto3" json:"stream_updates,omitempty"`
	LimiterIn     *Limiter              `protobuf:"bytes,3,opt,name=limiter_in,json=limiterIn,proto3" json:"limiter_in,omitempty"`
	SamplingIn    *Sampling             `protobuf:"bytes,4,opt,name=sampling_in,json=samplingIn,proto3" json:"sampling_in,omitempty"`
	LimiterOut    *Limiter              `protobuf:"bytes,5,opt,name=limiter_out,json=limiterOut,proto3" json:"limiter_out,omitempty"`
	DigestUpdates []*ClientDigestUpdate `protobuf:"bytes,6,rep,name=digest_updates,json=digestUpdates,proto3" json:"digest_updates,omitempty"`
}

func (x *ClientSamplerConfigUpdate) Reset() {
	*x = ClientSamplerConfigUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfigUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfigUpdate) ProtoMessage() {}

func (x *ClientSamplerConfigUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfigUpdate.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfigUpdate) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{27}
}

func (x *ClientSamplerConfigUpdate) GetReset_() *ClientSamplerConfigUpdate_Reset {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *ClientSamplerConfigUpdate) GetStreamUpdates() []*ClientStreamUpdate {
	if x != nil {
		return x.StreamUpdates
	}
	return nil
}

func (x *ClientSamplerConfigUpdate) GetLimiterIn() *Limiter {
	if x != nil {
		return x.LimiterIn
	}
	return nil
}

func (x *ClientSamplerConfigUpdate) GetSamplingIn() *Sampling {
	if x != nil {
		return x.SamplingIn
	}
	return nil
}

func (x *ClientSamplerConfigUpdate) GetLimiterOut() *Limiter {
	if x != nil {
		return x.LimiterOut
	}
	return nil
}

func (x *ClientSamplerConfigUpdate) GetDigestUpdates() []*ClientDigestUpdate {
	if x != nil {
		return x.DigestUpdates
	}
	return nil
}

type ClientSamplerConfReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Samplers to configure. All samplers with the provided name will
	// receive this configuration. It is a mandatory field.
	SamplerName string `protobuf:"bytes,1,opt,name=sampler_name,json=samplerName,proto3" json:"sampler_name,omitempty"`
	// Name of the resource where the sampler is defined
	SamplerResource string `protobuf:"bytes,2,opt,name=sampler_resource,json=samplerResource,proto3" json:"sampler_resource,omitempty"`
	// If sampler_uid is set, only the sampler with the specified uid will be
	// configured.
	SamplerUid string `protobuf:"bytes,3,opt,name=sampler_uid,json=samplerUid,proto3" json:"sampler_uid,omitempty"`
	// Update configuration options. If not set, resets all configuration options
	SamplerConfigUpdate *ClientSamplerConfigUpdate `protobuf:"bytes,4,opt,name=sampler_config_update,json=samplerConfigUpdate,proto3" json:"sampler_config_update,omitempty"`
}

func (x *ClientSamplerConfReq) Reset() {
	*x = ClientSamplerConfReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfReq) ProtoMessage() {}

func (x *ClientSamplerConfReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfReq.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfReq) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{28}
}

func (x *ClientSamplerConfReq) GetSamplerName() string {
	if x != nil {
		return x.SamplerName
	}
	return ""
}

func (x *ClientSamplerConfReq) GetSamplerResource() string {
	if x != nil {
		return x.SamplerResource
	}
	return ""
}

func (x *ClientSamplerConfReq) GetSamplerUid() string {
	if x != nil {
		return x.SamplerUid
	}
	return ""
}

func (x *ClientSamplerConfReq) GetSamplerConfigUpdate() *ClientSamplerConfigUpdate {
	if x != nil {
		return x.SamplerConfigUpdate
	}
	return nil
}

type ClientSamplerConfRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ClientSamplerConfRes) Reset() {
	*x = ClientSamplerConfRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfRes) ProtoMessage() {}

func (x *ClientSamplerConfRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfRes.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfRes) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{29}
}

func (x *ClientSamplerConfRes) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Stream_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language Stream_Rule_Language `protobuf:"varint,1,opt,name=language,proto3,enum=Stream_Rule_Language" json:"language,omitempty"`
	Rule     string               `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Stream_Rule) Reset() {
	*x = Stream_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream_Rule) ProtoMessage() {}

func (x *Stream_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream_Rule.ProtoReflect.Descriptor instead.
func (*Stream_Rule) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Stream_Rule) GetLanguage() Stream_Rule_Language {
	if x != nil {
		return x.Language
	}
	return Stream_Rule_UNKNOWN
}

func (x *Stream_Rule) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

type Digest_St struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxProcessedFields int32 `protobuf:"varint,1,opt,name=max_processed_fields,json=maxProcessedFields,proto3" json:"max_processed_fields,omitempty"`
}

func (x *Digest_St) Reset() {
	*x = Digest_St{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digest_St) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digest_St) ProtoMessage() {}

func (x *Digest_St) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digest_St.ProtoReflect.Descriptor instead.
func (*Digest_St) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Digest_St) GetMaxProcessedFields() int32 {
	if x != nil {
		return x.MaxProcessedFields
	}
	return 0
}

// If a field is set to true, it means that the field is reset to its default.
// If a configuration option is reset and set in the same request, it will be
// first resetted and then set to its new value.
type ClientSamplerConfigUpdate_Reset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streams    bool `protobuf:"varint,1,opt,name=streams,proto3" json:"streams,omitempty"`
	LimiterIn  bool `protobuf:"varint,2,opt,name=limiter_in,json=limiterIn,proto3" json:"limiter_in,omitempty"`
	SamplingIn bool `protobuf:"varint,3,opt,name=sampling_in,json=samplingIn,proto3" json:"sampling_in,omitempty"`
	LimiterOut bool `protobuf:"varint,4,opt,name=limiter_out,json=limiterOut,proto3" json:"limiter_out,omitempty"`
	Digests    bool `protobuf:"varint,5,opt,name=digests,proto3" json:"digests,omitempty"`
}

func (x *ClientSamplerConfigUpdate_Reset) Reset() {
	*x = ClientSamplerConfigUpdate_Reset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_controlplane_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSamplerConfigUpdate_Reset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSamplerConfigUpdate_Reset) ProtoMessage() {}

func (x *ClientSamplerConfigUpdate_Reset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_controlplane_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSamplerConfigUpdate_Reset.ProtoReflect.Descriptor instead.
func (*ClientSamplerConfigUpdate_Reset) Descriptor() ([]byte, []int) {
	return file_protos_controlplane_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ClientSamplerConfigUpdate_Reset) GetStreams() bool {
	if x != nil {
		return x.Streams
	}
	return false
}

func (x *ClientSamplerConfigUpdate_Reset) GetLimiterIn() bool {
	if x != nil {
		return x.LimiterIn
	}
	return false
}

func (x *ClientSamplerConfigUpdate_Reset) GetSamplingIn() bool {
	if x != nil {
		return x.SamplingIn
	}
	return false
}

func (x *ClientSamplerConfigUpdate_Reset) GetLimiterOut() bool {
	if x != nil {
		return x.LimiterOut
	}
	return false
}

func (x *ClientSamplerConfigUpdate_Reset) GetDigests() bool {
	if x != nil {
		return x.Digests
	}
	return false
}

var File_protos_controlplane_proto protoreflect.FileDescriptor

var file_protos_controlplane_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x22, 0x72, 0x0a, 0x15, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x44,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x08, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a, 0x16, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x22, 0x1f, 0x0a, 0x07, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x1a, 0x6f, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x45, 0x4c, 0x10, 0x01, 0x22, 0xf6, 0x01, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x48, 0x00, 0x52, 0x02, 0x73, 0x74, 0x1a, 0x36, 0x0a,
	0x02, 0x53, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x01,
	0x0a, 0x0d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x21, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x12, 0x29, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x07, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46,
	0x10, 0x02, 0x22, 0xd2, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x52, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xe3, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x44, 0x0a, 0x11, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x41, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65,
	0x71, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x52, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfc,
	0x02, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67,
	0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x41, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f,
	0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a,
	0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67,
	0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xbf,
	0x01, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x35, 0x0a, 0x12, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x37, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x73, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x38, 0x0a,
	0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x17, 0x0a,
	0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x22, 0x5e, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x29, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x1f, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0x29, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0xea, 0x03, 0x0a,
	0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x05, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x12, 0x29, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x3a,
	0x0a, 0x0e, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52,
	0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x13, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x79, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x10, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x12,
	0x0f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x1a, 0x0f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_controlplane_proto_rawDescOnce sync.Once
	file_protos_controlplane_proto_rawDescData = file_protos_controlplane_proto_rawDesc
)

func file_protos_controlplane_proto_rawDescGZIP() []byte {
	file_protos_controlplane_proto_rawDescOnce.Do(func() {
		file_protos_controlplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_controlplane_proto_rawDescData)
	})
	return file_protos_controlplane_proto_rawDescData
}

var file_protos_controlplane_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_protos_controlplane_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_protos_controlplane_proto_goTypes = []interface{}{
	(Status_Type)(0),                        // 0: Status.Type
	(Stream_Rule_Language)(0),               // 1: Stream.Rule.Language
	(Schema_Type)(0),                        // 2: Schema.Type
	(ClientStreamUpdate_Op)(0),              // 3: ClientStreamUpdate.Op
	(ClientDigestUpdate_Op)(0),              // 4: ClientDigestUpdate.Op
	(*Status)(nil),                          // 5: Status
	(*DeterministicSampling)(nil),           // 6: DeterministicSampling
	(*Sampling)(nil),                        // 7: Sampling
	(*Limiter)(nil),                         // 8: Limiter
	(*Stream)(nil),                          // 9: Stream
	(*Digest)(nil),                          // 10: Digest
	(*SamplerConfig)(nil),                   // 11: SamplerConfig
	(*SamplerSamplingStats)(nil),            // 12: SamplerSamplingStats
	(*Schema)(nil),                          // 13: Schema
	(*Sampler)(nil),                         // 14: Sampler
	(*SamplerToServer)(nil),                 // 15: SamplerToServer
	(*ServerToSampler)(nil),                 // 16: ServerToSampler
	(*ClientToServer)(nil),                  // 17: ClientToServer
	(*ServerToClient)(nil),                  // 18: ServerToClient
	(*SamplerStatsMsg)(nil),                 // 19: SamplerStatsMsg
	(*SamplerRegisterReq)(nil),              // 20: SamplerRegisterReq
	(*SamplerRegisterRes)(nil),              // 21: SamplerRegisterRes
	(*ServerSamplerConfReq)(nil),            // 22: ServerSamplerConfReq
	(*ServerSamplerConfRes)(nil),            // 23: ServerSamplerConfRes
	(*ClientSamplerStats)(nil),              // 24: ClientSamplerStats
	(*ClientSamplerStatsMsg)(nil),           // 25: ClientSamplerStatsMsg
	(*ClientRegisterReq)(nil),               // 26: ClientRegisterReq
	(*ClientRegisterRes)(nil),               // 27: ClientRegisterRes
	(*ClientListSamplersReq)(nil),           // 28: ClientListSamplersReq
	(*ClientListSamplersRes)(nil),           // 29: ClientListSamplersRes
	(*ClientStreamUpdate)(nil),              // 30: ClientStreamUpdate
	(*ClientDigestUpdate)(nil),              // 31: ClientDigestUpdate
	(*ClientSamplerConfigUpdate)(nil),       // 32: ClientSamplerConfigUpdate
	(*ClientSamplerConfReq)(nil),            // 33: ClientSamplerConfReq
	(*ClientSamplerConfRes)(nil),            // 34: ClientSamplerConfRes
	(*Stream_Rule)(nil),                     // 35: Stream.Rule
	(*Digest_St)(nil),                       // 36: Digest.St
	nil,                                     // 37: SamplerRegisterReq.TagsEntry
	nil,                                     // 38: ClientRegisterReq.TagsEntry
	(*ClientSamplerConfigUpdate_Reset)(nil), // 39: ClientSamplerConfigUpdate.Reset
	(*durationpb.Duration)(nil),             // 40: google.protobuf.Duration
	(*anypb.Any)(nil),                       // 41: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),           // 42: google.protobuf.Timestamp
}
var file_protos_controlplane_proto_depIdxs = []int32{
	0,  // 0: Status.type:type_name -> Status.Type
	6,  // 1: Sampling.deterministic_sampling:type_name -> DeterministicSampling
	35, // 2: Stream.rule:type_name -> Stream.Rule
	40, // 3: Digest.flush_period:type_name -> google.protobuf.Duration
	36, // 4: Digest.st:type_name -> Digest.St
	9,  // 5: SamplerConfig.streams:type_name -> Stream
	8,  // 6: SamplerConfig.limiter_in:type_name -> Limiter
	7,  // 7: SamplerConfig.sampling_in:type_name -> Sampling
	8,  // 8: SamplerConfig.limiter_out:type_name -> Limiter
	10, // 9: SamplerConfig.digests:type_name -> Digest
	2,  // 10: Schema.type:type_name -> Schema.Type
	41, // 11: Schema.schema:type_name -> google.protobuf.Any
	13, // 12: Sampler.schema:type_name -> Schema
	11, // 13: Sampler.config:type_name -> SamplerConfig
	12, // 14: Sampler.sampling_stats:type_name -> SamplerSamplingStats
	42, // 15: SamplerToServer.timestamp:type_name -> google.protobuf.Timestamp
	19, // 16: SamplerToServer.sampler_stats_msg:type_name -> SamplerStatsMsg
	20, // 17: SamplerToServer.register_req:type_name -> SamplerRegisterReq
	23, // 18: SamplerToServer.conf_res:type_name -> ServerSamplerConfRes
	42, // 19: ServerToSampler.timestamp:type_name -> google.protobuf.Timestamp
	21, // 20: ServerToSampler.register_res:type_name -> SamplerRegisterRes
	22, // 21: ServerToSampler.conf_req:type_name -> ServerSamplerConfReq
	42, // 22: ClientToServer.timestamp:type_name -> google.protobuf.Timestamp
	26, // 23: ClientToServer.register_req:type_name -> ClientRegisterReq
	28, // 24: ClientToServer.list_samplers_req:type_name -> ClientListSamplersReq
	33, // 25: ClientToServer.sampler_conf_req:type_name -> ClientSamplerConfReq
	42, // 26: ServerToClient.timestamp:type_name -> google.protobuf.Timestamp
	25, // 27: ServerToClient.sampler_stats_msg:type_name -> ClientSamplerStatsMsg
	27, // 28: ServerToClient.register_res:type_name -> ClientRegisterRes
	29, // 29: ServerToClient.list_samplers_res:type_name -> ClientListSamplersRes
	34, // 30: ServerToClient.sampler_conf_res:type_name -> ClientSamplerConfRes
	12, // 31: SamplerStatsMsg.sampling_stats:type_name -> SamplerSamplingStats
	37, // 32: SamplerRegisterReq.tags:type_name -> SamplerRegisterReq.TagsEntry
	5,  // 33: SamplerRegisterRes.status:type_name -> Status
	11, // 34: ServerSamplerConfReq.sampler_config:type_name -> SamplerConfig
	5,  // 35: ServerSamplerConfRes.status:type_name -> Status
	12, // 36: ClientSamplerStats.sampling_stats:type_name -> SamplerSamplingStats
	24, // 37: ClientSamplerStatsMsg.sampler_stats:type_name -> ClientSamplerStats
	38, // 38: ClientRegisterReq.tags:type_name -> ClientRegisterReq.TagsEntry
	5,  // 39: ClientRegisterRes.status:type_name -> Status
	5,  // 40: ClientListSamplersRes.status:type_name -> Status
	14, // 41: ClientListSamplersRes.samplers:type_name -> Sampler
	3,  // 42: ClientStreamUpdate.op:type_name -> ClientStreamUpdate.Op
	9,  // 43: ClientStreamUpdate.stream:type_name -> Stream
	4,  // 44: ClientDigestUpdate.op:type_name -> ClientDigestUpdate.Op
	10, // 45: ClientDigestUpdate.digest:type_name -> Digest
	39, // 46: ClientSamplerConfigUpdate.reset:type_name -> ClientSamplerConfigUpdate.Reset
	30, // 47: ClientSamplerConfigUpdate.stream_updates:type_name -> ClientStreamUpdate
	8,  // 48: ClientSamplerConfigUpdate.limiter_in:type_name -> Limiter
	7,  // 49: ClientSamplerConfigUpdate.sampling_in:type_name -> Sampling
	8,  // 50: ClientSamplerConfigUpdate.limiter_out:type_name -> Limiter
	31, // 51: ClientSamplerConfigUpdate.digest_updates:type_name -> ClientDigestUpdate
	32, // 52: ClientSamplerConfReq.sampler_config_update:type_name -> ClientSamplerConfigUpdate
	5,  // 53: ClientSamplerConfRes.status:type_name -> Status
	1,  // 54: Stream.Rule.language:type_name -> Stream.Rule.Language
	15, // 55: ControlPlane.SamplerConn:input_type -> SamplerToServer
	17, // 56: ControlPlane.ClientConn:input_type -> ClientToServer
	16, // 57: ControlPlane.SamplerConn:output_type -> ServerToSampler
	18, // 58: ControlPlane.ClientConn:output_type -> ServerToClient
	57, // [57:59] is the sub-list for method output_type
	55, // [55:57] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_protos_controlplane_proto_init() }
func file_protos_controlplane_proto_init() {
	if File_protos_controlplane_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_controlplane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeterministicSampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerSamplingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerStatsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplerRegisterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSamplerConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSamplerConfRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerStatsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRegisterRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientListSamplersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientListSamplersRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStreamUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDigestUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfigUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digest_St); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_controlplane_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSamplerConfigUpdate_Reset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_controlplane_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Sampling_DeterministicSampling)(nil),
	}
	file_protos_controlplane_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Digest_St_)(nil),
	}
	file_protos_controlplane_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SamplerToServer_SamplerStatsMsg)(nil),
		(*SamplerToServer_RegisterReq)(nil),
		(*SamplerToServer_ConfRes)(nil),
	}
	file_protos_controlplane_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ServerToSampler_RegisterRes)(nil),
		(*ServerToSampler_ConfReq)(nil),
	}
	file_protos_controlplane_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ClientToServer_RegisterReq)(nil),
		(*ClientToServer_ListSamplersReq)(nil),
		(*ClientToServer_SamplerConfReq)(nil),
	}
	file_protos_controlplane_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ServerToClient_SamplerStatsMsg)(nil),
		(*ServerToClient_RegisterRes)(nil),
		(*ServerToClient_ListSamplersRes)(nil),
		(*ServerToClient_SamplerConfRes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_controlplane_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_controlplane_proto_goTypes,
		DependencyIndexes: file_protos_controlplane_proto_depIdxs,
		EnumInfos:         file_protos_controlplane_proto_enumTypes,
		MessageInfos:      file_protos_controlplane_proto_msgTypes,
	}.Build()
	File_protos_controlplane_proto = out.File
	file_protos_controlplane_proto_rawDesc = nil
	file_protos_controlplane_proto_goTypes = nil
	file_protos_controlplane_proto_depIdxs = nil
}
