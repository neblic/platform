syntax = "proto3";
option go_package = "github.com/neblic/platform/dataplane/protos";


/*
Structure digest
*/

message IntNumSt { int64 count = 1; }
message UIntNumSt { int64 count = 1; }
message FloatNumSt { int64 count = 1; }
message NumberSt {
  // if more than one is set, multiple types detected
  IntNumSt integer_num = 1;
  UIntNumSt uinteger_num = 2;
  FloatNumSt float_num = 3;
}

message StringSt { int64 count = 1; }
message BooleanSt { int64 count = 1; }

message ValueSt {
  // if more than one is set, multiple types detected
  NumberSt number = 1;
  StringSt string = 2;
  BooleanSt boolean = 3;
  ArraySt array = 4;
  ObjSt obj = 5;
}
message ObjSt {
  int64 count = 1;
  map<string, ValueSt> fields = 2;

  // TODO: Add special field for stats about the rest of the fields
  // when there are more than the configured maximum
}

message ArraySt {
  int64 count = 1;
  ValueSt values = 2;

  double min_length = 3;
  double max_length = 4;
  // to be able to calculate the average when aggregating digests
  double sum_length = 5;
}

message StructureDigest { ObjSt obj = 1; }


/*
Value digest
*/

message MinStat {
  double value = 1;
}

message AvgStat {
  double sum = 1;
  uint64 count = 2;
}

message MaxStat {
  double value = 1;
}

message HyperLogLog {
  bytes data = 1;
  uint64 cardinality = 2;
}

message NumberStat {
  MinStat min = 1;
  AvgStat avg = 2;
  MaxStat max = 3;
  HyperLogLog hyper_log_log = 4;
}

message NumberValue {
  uint64 total_count = 1;
  uint64 default_count = 2;
  uint64 null_count = 3;

  MinStat min = 4;
  AvgStat avg = 5;
  MaxStat max = 6;
  HyperLogLog hyper_log_log = 7;
}

message StringValue {
  uint64 total_count = 1;
  uint64 default_count = 2;
  uint64 null_count = 3;

  HyperLogLog hyper_log_log = 4;

  NumberStat length = 6;
}

message BooleanValue {
  uint64 total_count = 1;
  uint64 default_count = 2;
  uint64 null_count = 3;

  uint64 false_count = 4;
  uint64 true_count = 5;
}

message ArrayValue {
  uint64 total_count = 1;
  uint64 default_count = 2;
  uint64 null_count = 3;

  ValueValue values = 4;
}

message ObjValue {
  uint64 total_count = 1;
  uint64 default_count = 2;
  uint64 null_count = 3;

  map<string, ValueValue> fields = 4;
}

message ValueValue {
  uint64 total_count = 1;
  uint64 null_count = 2;

  // if more than one is set, multiple types detected
  NumberValue number = 3;
  StringValue string = 4;
  BooleanValue boolean = 5;
  ArrayValue array = 6;
  ObjValue obj = 7;
}


// used for testing
message TestSample {
  double double = 1;
  float float = 2;
  int32 int32 = 3;
  int64 int64 = 4;
  uint32 uint32 = 5;
  uint64 uint64 = 6;
  sint32 sint32 = 7;
  sint64 sint64 = 8;
  fixed32 fixed32 = 9;
  fixed64 fixed64 = 10;
  sfixed32 sfixed32 = 11;
  sfixed64 sfixed64 = 12;
  bool bool = 13;
  string string = 14;
  bytes bytes = 15;
  repeated int32 array = 16;
  map<int32, int32> map = 17;
  TestSample nested_msg = 18;
  repeated TestSample nested_msgs = 19;
}
