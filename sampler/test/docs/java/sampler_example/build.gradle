plugins {
    id 'idea'
    id 'application'
}

repositories {
    mavenCentral()
    mavenLocal()
}

description = 'SamplerExample'
group = "sampler_example"
version = "0.1.0-SNAPSHOT"

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        implementation fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        implementation platform("io.opentelemetry:opentelemetry-bom:1.35.0"),
                "io.opentelemetry:opentelemetry-api",
                "io.opentelemetry:opentelemetry-sdk",
                "io.opentelemetry:opentelemetry-exporter-otlp",
                "io.opentelemetry:opentelemetry-semconv:1.30.1-alpha"
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'sampler_example'
        }
    }
}

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compileClasspath
    into offlineCompile
    from configurations.compileClasspath
    into offlineCompile
}

task samplerExample(type: CreateStartScripts) {
    mainClass = 'sampler_example.SamplerExample'
    applicationName = 'SamplerExample'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(samplerExample)
    fileMode = 0755
}
